apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "helm-guestbook.fullname" . }}
  labels:
    app: {{ template "helm-guestbook.name" . }}
    chart: {{ template "helm-guestbook.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: {{ template "helm-guestbook.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "helm-guestbook.name" . }}
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http2
              containerPort: 8082
              protocol: TCP
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/liveness
          readinessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/readiness
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka-service
  name: kafka-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-service
  template:
    metadata:
      labels:
        app: kafka-service
    spec:
      containers:
      - env:
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zookeeper-service:2181
        - name: KAFKA_LISTENERS
          value: PLAINTEXT://9092,LISTENER_EXTERNAL://localhost:9093
        - name: KAFKA_ADVERTISED_LISTENERS
          value: PLAINTEXT://9092,LISTENER_EXTERNAL://localhost:9093
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: LISTENER_INTERNAL
        image: wurstmeister/kafka
        imagePullPolicy: IfNotPresent
        name: kafka-service
        ports:
        - containerPort: 9092


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  labels:
    app: order-service
    chart: order-service
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: order-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: order-service
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: order-service
          image: "{{ .Values.imageOrderService.repository }}:{{ .Values.imageOrderService.tag }}"
          imagePullPolicy: {{ .Values.imageOrderService.pullPolicy }}
          ports:
            - name: http2
              containerPort: 8082
              protocol: TCP
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/liveness
          readinessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/readiness

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-service
  labels:
    app: notification-service
    chart: notification-service
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: notification-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: notification-service
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: notification-service
          image: "{{ .Values.imageNotificationService.repository }}:{{ .Values.imageNotificationService.tag }}"
          imagePullPolicy: {{ .Values.imageNotificationService.pullPolicy }}
          ports:
            - name: http2
              containerPort: 8082
              protocol: TCP
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/liveness
          readinessProbe:
            initialDelaySeconds: 60
            httpGet:
              port: http
              path: /actuator/health/readiness